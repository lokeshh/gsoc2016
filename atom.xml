<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GSoC 2016 Progress]]></title>
  <link href="http://lokeshh.github.io/atom.xml" rel="self"/>
  <link href="http://lokeshh.github.io/"/>
  <updated>2016-08-19T12:19:19+00:00</updated>
  <id>http://lokeshh.github.io/</id>
  <author>
    <name><![CDATA[Lokesh Sharma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC Summary]]></title>
    <link href="http://lokeshh.github.io/blog/2016/08/18/gsoc-summary/"/>
    <updated>2016-08-18T17:08:46+00:00</updated>
    <id>http://lokeshh.github.io/blog/2016/08/18/gsoc-summary</id>
    <content type="html"><![CDATA[<h2>Summary</h2>

<p>During this GSoC I implemented support for categorical data in Daru and regression in Statsample-GLM with formula language.</p>

<h2>Pull Requests</h2>

<p>The following are the main pull requests regarding my project:</p>

<ul>
<li><a href="https://github.com/v0dro/daru/pull/134">Daru#134</a> In this I implemented the following:

<ul>
<li><code>CategoricalIndex</code> class for handling categorical index</li>
<li><code>Category</code> module to add categorical data support in <code>Daru::Vector</code> and <code>Daru::DataFrame</code></li>
<li>Visualization support for categorical data</li>
</ul>
</li>
<li><a href="https://github.com/SciRuby/statsample-glm/pull/31">Statsample-GLM#31</a> In this I implemented the following:

<ul>
<li>Formula language support</li>
<li>Categorical data support in regression</li>
</ul>
</li>
<li><a href="https://github.com/SciRuby/statsample/pull/51">Statsample#51</a> It implements formula language and categorical data support for regression in Statsample. This is unmerged, reason being that we are not sure whether we should remove the linear regression support from Stastsample or not. See <a href="https://github.com/SciRuby/statsample/issues/53">here</a>. We will either end up merging this pull request or moving the linear regression form here to Statsample-GLM.</li>
<li><a href="https://github.com/v0dro/daru/pull/208/">Daru#208</a> It does the following:

<ul>
<li>Implements missing value support for categorical data</li>
<li>Improves the missing values API to make it simple and improve performance of Daru update operations</li>
</ul>
</li>
</ul>


<p><a href="https://github.com/v0dro/daru/pulls?utf8=%E2%9C%93&amp;q=is%3Apr%20author%3Alokeshh">Here</a> are other pull requests not necessary related to the project.</p>

<p>Now I will talk in detail about the work in these pull requests:</p>

<h3><a href="https://github.com/v0dro/daru/pull/134">Daru#134</a></h3>

<p>This was my major work during the weeks from 1 to 6th week.</p>

<p>You can find every detail of my work like what exactly I implemented, why I made certain decisions and how to use it in the following posts:</p>

<ul>
<li><a href="http://lokeshh.github.io/blog/2016/06/14/categorical-index/">Categorical Index</a></li>
<li><a href="http://lokeshh.github.io/blog/2016/06/21/categorical-data/">Categorical Data</a></li>
<li><a href="http://lokeshh.github.io/blog/2016/07/02/visualization/">Visualization</a></li>
</ul>


<p>This PR has been merged.</p>

<h3><a href="https://github.com/SciRuby/statsample-glm/pull/31">Statsample-GLM#31</a></h3>

<p>The following posts discusses in detail my work:</p>

<ul>
<li><a href="http://lokeshh.github.io/blog/2016/07/19/formula-language-week7-8/">Formula Language Implementation and Categorical Data Support in Regression</a></li>
<li><a href="http://lokeshh.github.io/blog/2016/07/31/shortcut-symbols/">Shorcut Symbols</a></li>
</ul>


<p>This PR is about to get merged. Just waiting for the new Daru to be released.</p>

<h3><a href="https://github.com/SciRuby/statsample/pull/51">Statsample#51</a></h3>

<p>This pull request is currently unmerged. It implements the same functionality as the above pull request does for Statsample-GLM.</p>

<p>Earlier our plan was to implement support for categorical data in both Statsample and Stastsample-GLM but because linear regression is also present in Statsample-GLM. And since linear regression in Statsample is better in terms of performance as compared to Statsample-GLM we are looking to remove the linear regression from Statsample and move it to Statsample-GLM. More information is <a href="https://github.com/SciRuby/statsample/issues/53">here</a>.</p>

<p>So, we will doing one of these two things:</p>

<ul>
<li>Merge this pull request and do not remove linear regression from Statsample.</li>
<li>Or move linear regression from Statsample to Statsample-GLM.</li>
</ul>


<h3><a href="https://github.com/v0dro/daru/pull/208/">Daru#208</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve Missing Values API in Daru [Week 11-12]]]></title>
    <link href="http://lokeshh.github.io/blog/2016/08/18/improve-missing-values-api-in-daru/"/>
    <updated>2016-08-18T09:22:15+00:00</updated>
    <id>http://lokeshh.github.io/blog/2016/08/18/improve-missing-values-api-in-daru</id>
    <content type="html"><![CDATA[<p>The end of GSoC is near. I ended up finishing up a bit early on the formula language implementation and decided to devote the time on some other important issues.</p>

<p>During these last two weeks I solved some issues in Daru and mainly worked on <a href="https://github.com/v0dro/daru/issues/137">this issue</a> regarding how missing values are handled in Daru.</p>

<p>The following were the shortcomings:</p>

<ul>
<li>Update operations like <code>#[]=</code>, <code>#set_at</code> were slow.</li>
<li>Any value could be set as missing values, which made the checks for missing values somewhat hard.</li>
</ul>


<p>Now, Daru follows a simple approach of only considering <code>nil</code> and <code>Float::NAN</code> as the missing values. Although one loses the flexibility of assigning an arbitrary value as missing but it has greatly simplified many things and also improvement in performance is significant. Further, one can simply uses <code>#replace</code> now to change the values which he/she wants to treat as missing to <code>nil</code>.</p>

<p>In addition to that, the updates have become blazingly fast without compromising the caching of missing values. I accomplished by the following strategy:</p>

<ul>
<li>During the updates the cache which stores the positions of <code>nil</code> and <code>Float::NAN</code> gets outdated and doesn&rsquo;t get updated until we require those positions.</li>
<li>When missing positions of either <code>nil</code> or <code>Float::NAN</code> are required by any of the missing value method, those are returned if cache isn&rsquo;t outdated and if the cache is outdated then its rebuilt.</li>
</ul>


<p>This way one has best of both worlds. The updates remain fast and also the caching of <code>nil</code> and <code>Float::NAN</code> is maintained.</p>

<p>I ran the following benchmarks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">100000</span>
</span><span class='line'><span class="n">dv</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span> <span class="mi">1</span><span class="o">.</span><span class="n">.n</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">dv</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">dv</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="c1"># Need to be replaced with only_valid when running for before</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">dv</span><span class="o">.</span><span class="n">reject_values</span> <span class="kp">nil</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And these are the results before and after:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Before</span>
</span><span class='line'>       <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'>   <span class="mi">1</span><span class="o">.</span><span class="mi">840000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">1</span><span class="o">.</span><span class="mi">840000</span> <span class="p">(</span>  <span class="mi">1</span><span class="o">.</span><span class="mi">840055</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">15</span><span class="o">.</span><span class="mi">080000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">060000</span>  <span class="mi">15</span><span class="o">.</span><span class="mi">140000</span> <span class="p">(</span> <span class="mi">15</span><span class="o">.</span><span class="mi">462978</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># After</span>
</span><span class='line'>       <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mo">00030</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">11</span><span class="o">.</span><span class="mi">120000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">160000</span>  <span class="mi">11</span><span class="o">.</span><span class="mi">280000</span> <span class="p">(</span> <span class="mi">11</span><span class="o">.</span><span class="mi">385459</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the summary of the old and new API regarding handling of missing values:</p>

<p>Methods added in Daru::Vector (and category):</p>

<ul>
<li>reject_values</li>
<li>include_values?</li>
<li>indexes</li>
<li>count_values</li>
<li>replace values</li>
</ul>


<p>Methods added in Daru::DataFrame:</p>

<ul>
<li>reject_values</li>
<li>include_values?</li>
<li>replace_values</li>
</ul>


<p>Methods removed in Daru::Vector:</p>

<ul>
<li>missing_values</li>
<li>missing_values=</li>
<li>update</li>
<li>exists?</li>
<li>set_missing_positions</li>
</ul>


<p>and other methods <code>#has_missing_data?</code>, <code>#n_valid</code> have been deprecated.</p>

<h2>Conclusion</h2>

<ul>
<li>As you can notice the performance of Daru updating methods have undergone a major improvement and the its effects will be far reaching from improving other things in Daru to imporoving the performance in Statsample and Statsample-GLM.</li>
<li>During the way I learned how to use tools like <code>ruby-prof</code> to benchmark the code and understand where&rsquo;s the performance is lagging.</li>
<li>I noticed that methods like <code>#[]</code> are proving to be bottleneck and there lie chances of their improvement.</li>
<li>Thanks to <a href="https://github.com/zverok">Victor</a> for suggestiong this change in Daru, providing with good API and helping me all the way to implement it.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shortcut Symbols [Week 9-10]]]></title>
    <link href="http://lokeshh.github.io/blog/2016/07/31/shortcut-symbols/"/>
    <updated>2016-07-31T03:29:37+00:00</updated>
    <id>http://lokeshh.github.io/blog/2016/07/31/shortcut-symbols</id>
    <content type="html"><![CDATA[<p>With the work done in Week 9 and 10, Statsample-GLM now supports shortcut symbols in Formula Language.</p>

<p>With this addition, the regression has become more <a href="">R/Patsy like</a> and more convenient.</p>

<h2>Symbols Added</h2>

<p>There are two shortcut symbols now being supported:</p>

<ul>
<li><code>*</code></li>
<li><code>/</code></li>
</ul>


<p><code>a*b</code> is shortcut for <code>a+b+a:b</code>. This is commonly used within regression models.</p>

<p><code>a/b</code> is shortcut for <code>a+a:b</code>. Its quite useful while dealing with nested categorical variables. <code>a/b</code> makes sense when <code>b</code> is nested inside <code>a</code>.</p>

<h2>Brackets</h2>

<p>This week brackets support has been added so one can form expression involving use of brackets. For example <code>(a+b):c</code> would evaluate to <code>a:c + b:c</code>.</p>

<p>It supports any level of sophistication with symbols and brackets. For example <code>(a+b)*(c+d)</code> would give <code>a+b+c+d+a:c+a:d+b:c+b:d</code>.</p>

<h2>Note</h2>

<p>Although there are certain limitations to the current formula language:</p>

<ol>
<li>Since more than 2-way interactions are not supported yet, formula like <code>a*b*c</code> wouldn&rsquo;t work.</li>
<li>There&rsquo;s not a mechanism to deal with cases such as <code>a*a</code>.</li>
</ol>


<h2>Formula Language in Statsample</h2>

<p>Earlier, the plan was to implement the formula language also in Statsample but because Statsample which supports just linear regression is also supported by name Normal Regression in Statsample-GLM, we are planning to not implement formula language in Statsample but rather remove the linear regression support from Statsample if it doesn&rsquo;t offer any advantage to Normal Regression in Statsample-GLM. For info, see <a href="https://github.com/SciRuby/statsample/issues/53">here</a>.</p>

<h2>Example using shortcut symbols</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">from_csv</span> <span class="s1">&#39;spec/data/df.csv&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Daru::DataFrame(14x6)&gt;</span>
</span><span class='line'>             <span class="n">y</span>      <span class="n">a</span>      <span class="n">b</span>      <span class="n">c</span>      <span class="n">d</span>      <span class="n">e</span>
</span><span class='line'>      <span class="mi">0</span>      <span class="mi">0</span>      <span class="mi">6</span>   <span class="mi">62</span><span class="o">.</span><span class="mi">1</span>     <span class="n">no</span> <span class="n">female</span>      <span class="n">A</span>
</span><span class='line'>      <span class="mi">1</span>      <span class="mi">1</span>     <span class="mi">18</span>   <span class="mi">34</span><span class="o">.</span><span class="mi">7</span>    <span class="n">yes</span>   <span class="n">male</span>      <span class="n">B</span>
</span><span class='line'>      <span class="mi">2</span>      <span class="mi">1</span>      <span class="mi">6</span>   <span class="mi">29</span><span class="o">.</span><span class="mi">7</span>     <span class="n">no</span> <span class="n">female</span>      <span class="n">C</span>
</span><span class='line'>      <span class="mi">3</span>      <span class="mi">0</span>      <span class="mi">4</span>     <span class="mi">71</span>     <span class="n">no</span>   <span class="n">male</span>      <span class="n">C</span>
</span><span class='line'>      <span class="mi">4</span>      <span class="mi">1</span>      <span class="mi">5</span>   <span class="mi">36</span><span class="o">.</span><span class="mi">9</span>    <span class="n">yes</span>   <span class="n">male</span>      <span class="n">B</span>
</span><span class='line'>      <span class="mi">5</span>      <span class="mi">0</span>     <span class="mi">11</span>   <span class="mi">58</span><span class="o">.</span><span class="mi">7</span>     <span class="n">no</span> <span class="n">female</span>      <span class="n">B</span>
</span><span class='line'>      <span class="mi">6</span>      <span class="mi">0</span>      <span class="mi">8</span>   <span class="mi">63</span><span class="o">.</span><span class="mi">3</span>     <span class="n">no</span>   <span class="n">male</span>      <span class="n">B</span>
</span><span class='line'>      <span class="mi">7</span>      <span class="mi">1</span>     <span class="mi">21</span>   <span class="mi">20</span><span class="o">.</span><span class="mi">4</span>    <span class="n">yes</span>   <span class="n">male</span>      <span class="n">A</span>
</span><span class='line'>      <span class="mi">8</span>      <span class="mi">1</span>      <span class="mi">2</span>   <span class="mi">20</span><span class="o">.</span><span class="mi">5</span>    <span class="n">yes</span>   <span class="n">male</span>      <span class="n">C</span>
</span><span class='line'>      <span class="mi">9</span>      <span class="mi">0</span>     <span class="mi">11</span>   <span class="mi">59</span><span class="o">.</span><span class="mi">2</span>     <span class="n">no</span>   <span class="n">male</span>      <span class="n">B</span>
</span><span class='line'>     <span class="mi">10</span>      <span class="mi">0</span>      <span class="mi">1</span>   <span class="mi">76</span><span class="o">.</span><span class="mi">4</span>    <span class="n">yes</span> <span class="n">female</span>      <span class="n">A</span>
</span><span class='line'>     <span class="mi">11</span>      <span class="mi">0</span>      <span class="mi">8</span>   <span class="mi">71</span><span class="o">.</span><span class="mi">7</span>     <span class="n">no</span> <span class="n">female</span>      <span class="n">B</span>
</span><span class='line'>     <span class="mi">12</span>      <span class="mi">1</span>      <span class="mi">2</span>   <span class="mi">77</span><span class="o">.</span><span class="mi">5</span>     <span class="n">no</span>   <span class="n">male</span>      <span class="n">C</span>
</span><span class='line'>     <span class="mi">13</span>      <span class="mi">1</span>      <span class="mi">3</span>   <span class="mi">31</span><span class="o">.</span><span class="mi">1</span>     <span class="n">no</span>   <span class="n">male</span>      <span class="n">B</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">to_category</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">train</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">first</span> <span class="mi">10</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">test</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">last</span> <span class="mi">4</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">reg</span> <span class="o">=</span> <span class="no">Statsample</span><span class="o">::</span><span class="no">GLM</span><span class="o">::</span><span class="no">Regression</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;a~b*c&#39;</span><span class="p">,</span> <span class="n">train</span><span class="p">,</span> <span class="ss">:normal</span><span class="p">,</span> <span class="ss">algorithm</span><span class="p">:</span> <span class="ss">:mle</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">reg</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">coefficients</span> <span class="ss">:hash</span>
</span><span class='line'><span class="p">{</span><span class="ss">:c_yes</span><span class="o">=&gt;</span><span class="mi">5</span><span class="o">.</span><span class="mi">678447231711081</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:b</span><span class="o">=&gt;</span><span class="mi">0</span><span class="o">.</span><span class="mo">00075604175</span><span class="mi">97709064</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:&quot;c_yes:b&quot;</span><span class="o">=&gt;-</span><span class="mi">0</span><span class="o">.</span><span class="mo">064</span><span class="mi">81888635745593</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:constant</span><span class="o">=&gt;</span><span class="mi">7</span><span class="o">.</span><span class="mi">6233202721217825</span><span class="p">}</span>
</span><span class='line'><span class="c1"># Now lets obtain predictions from this model</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">reg</span><span class="o">.</span><span class="n">model</span> <span class="nb">test</span>
</span><span class='line'><span class="o">&lt;</span><span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">0</span> <span class="mi">8</span><span class="o">.</span><span class="mi">407366176569727</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">7</span><span class="o">.</span><span class="mi">677528466297357</span>
</span><span class='line'><span class="mi">2</span> <span class="mi">7</span><span class="o">.</span><span class="mi">681913508504028</span>
</span><span class='line'><span class="mi">3</span> <span class="mi">7</span><span class="o">.</span><span class="mi">646833170850658</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Internal Structure of Formula Language</h2>

<p>There are three classes by which formula language works:</p>

<ul>
<li><code>FormulaWrapper</code></li>
<li><code>Formula</code></li>
<li><code>Token</code></li>
</ul>


<p>When creation of a new model is invoked by <code>Statsample::GLM::Regression#new</code>, <code>FormulaWrapper</code> is first called.</p>

<p><code>FormulaWrapper</code> class does the necessary preprocessing. It does mainly two things:</p>

<ul>
<li>Apply the shortcut symbols and reduce the expression to only containing <code>:</code> and <code>+</code></li>
<li>After reducing to simple expression containing only <code>:</code> and <code>+</code>, it groups terms based on the numerical terms they are interacting with.</li>
</ul>


<p>After <code>FormulaWrapper</code> has form groups, it processes each of these groups using the <code>Formula</code> class.</p>

<p>The <code>Formula</code> class takes each group and form tokens which do not overlap, that is if they are converted to dataframe they won&rsquo;t contain redundancy in that dataframe.</p>

<p>The <code>Token</code> class stores the column names and can expand these columns when fed a dataframe.</p>

<p>Sounds confusing?</p>

<p>Lets try an example:</p>

<p>Lets say our expression is <code>x*a + b*c</code>, where <code>x</code> is numerical vector and <code>a</code>, <code>b</code> and <code>c</code> are categorical.</p>

<ol>
<li>First it will converted to simple expression by <code>FormulaWrapper</code>. It will be simplified as <code>1+x+a+x:a+b+c+b:c</code>. Notice shortcut symbols have disappeared and only <code>+</code> and <code>:</code> are remaining.</li>
<li>Now <code>1+x+a+x:a+b+c+b:c</code> is grouped into two groups [<code>1</code>, <code>a</code>, <code>b</code>, <code>c</code>, <code>b:c</code>] and [<code>1</code>, <code>a</code>]. The first group has the common numerical interaction terms as <code>1</code>, while the second group has common numerical interaction terms as <code>x</code>.</li>
<li>Now both the groups will be processed by <code>Formula</code> to produce dataframe with full rank.</li>
<li>First group will be parsed to <code>1+a(-)+b(-)+c(-)+b(-):c(-)</code> by <code>Formula</code> class. <code>a(-)</code> implies that vector <code>a</code> is contrast coded to reduced rank, while <code>a</code> implies its coded to full rank.</li>
<li>Second group will be parsed to <code>x + x:a(-)</code>.</li>
<li>In the end these terms are combined and resultant parsed expression is the sum of the above two expressions, i.e. <code>1+a(-)+b(-)+c(-)+b(-):c(-)+x+x:a(-)</code>.</li>
<li>Then are expanded into dataframes by <code>Token</code> class and these dataframes are concatted to form the final dataframe for the given expression.</li>
</ol>


<h2>Conclusion</h2>

<p>We saw the overview of how formula language works inside <code>Statsample::GLM</code> and shortcut symbols with brackets has made the usage much more convenient and powerful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Formula Language Implementation [Week 7-8]]]></title>
    <link href="http://lokeshh.github.io/blog/2016/07/19/formula-language-week7-8/"/>
    <updated>2016-07-19T18:26:41+00:00</updated>
    <id>http://lokeshh.github.io/blog/2016/07/19/formula-language-week7-8</id>
    <content type="html"><![CDATA[<p>After the end of 6 weeks we have category data support in Daru. Now in the coming weeks we will be adding support for category data in Statsample and Statsample-GLM.</p>

<p>Currently, Statsample and Statsample-GLM do not support regression with category data.</p>

<p>With the introduction of formula language I am looking to accomplish the following:</p>

<ul>
<li>To support regression with category data</li>
<li>To provide convenience of formula language to create regression models</li>
</ul>


<p>In these two weeks I have implemented a formula language but it is limited in certain ways. The work of following weeks will fill this gap.</p>

<p>Lets talk about the formula language I have implemented in these two weeks.</p>

<h2>Formula Language</h2>

<p>The formula language which I aim to implement is similar to that used within <a href="https://patsy.readthedocs.io/en/stable/formulas.html#how-formulas-work">R and Patsy</a></p>

<p>With the work of these two weeks, the formula language has the following features:</p>

<ul>
<li>It supports 2-way interaction.</li>
<li>It supports <code>:</code> and <code>+</code>.</li>
<li>It supports inclusion/exclusion of contant or intercept term.</li>
</ul>


<p>And since I have followed the Patsy way of implementing the formula langauge it has an edge over R. Since, Patsy has a more accurate algorithm for deciding whether to use a full or reduced-rank coding scheme for categorical factors, the same is inherited in Statsample and Statsample-GLM.</p>

<p>R sometimes can give under-specified model but this is not the case with our implementation. One example is expansion of <code>0 + a:x + a:b</code>, where <code>x</code> is numeric. More information about this can be found <a href="https://patsy.readthedocs.io/en/stable/R-comparison.html">here</a>.</p>

<p>I am thankful to Patsy for it made my work very easy by providing all the details in their <a href="https://patsy.readthedocs.io/en/stable/formulas.html#how-formulas-work">documentation</a>. Without it I would have fallen into many pitfalls.</p>

<p>Now lets see formula language in action in Statsample and Statsample-GLM.</p>

<h2>Regression in Statsample-GLM</h2>

<p>Regression in Statsample-GLM has become an easy task and in addition it now supports category data as predictor variables.</p>

<p>Lets see this by an example.</p>

<p>Lets assume a dataframe <code>df</code> with numeric columns <code>a</code>, <code>b</code>, and having category column <code>c</code>, <code>d</code>, <code>e</code>.</p>

<p>Lets create a logistic model with predictors <code>a</code>, <code>a*b</code>, <code>c</code> and <code>c:d</code>.</p>

<p>If we were to do this earlier, we would have done the following.</p>

<p>Since we can&rsquo;t code category variables, so lets leave <code>c</code> and <code>c:d</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">train</span><span class="o">[</span><span class="s1">&#39;a:b&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">train</span><span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="o">]</span> <span class="o">*</span> <span class="n">train</span><span class="o">[</span><span class="s1">&#39;b&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">train</span> <span class="o">=</span> <span class="n">train</span><span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;a:b&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">mod</span> <span class="o">=</span> <span class="no">Statsample</span><span class="o">::</span><span class="no">GLM</span><span class="o">.</span><span class="n">compute</span> <span class="n">train</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="ss">:logistic</span><span class="p">,</span> <span class="ss">constant</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&gt;</span> <span class="c1"># Now lets obtain predictions</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">test</span><span class="o">[</span><span class="s1">&#39;a:b&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="nb">test</span><span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="o">]</span> <span class="o">*</span> <span class="nb">test</span><span class="o">[</span><span class="s1">&#39;b&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">test</span> <span class="o">=</span> <span class="nb">test</span><span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;a:b&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">mod</span><span class="o">.</span><span class="n">predict</span> <span class="nb">test</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Daru::Vector(3)&gt;</span>
</span><span class='line'>      <span class="mi">0</span> <span class="mi">0</span><span class="o">.</span><span class="mi">9999</span>
</span><span class='line'>      <span class="mi">1</span> <span class="mi">0</span><span class="o">.</span><span class="mo">0123</span>
</span><span class='line'>      <span class="mi">2</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5925</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with the introduction of formula langauge it has become a very easy task with no work required to preprocess the dataframe.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">reg</span> <span class="o">=</span> <span class="no">Statsample</span><span class="o">::</span><span class="no">GLM</span><span class="o">::</span><span class="no">Regression</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;y~a+a:b+c+c:d&#39;</span><span class="p">,</span> <span class="n">train</span><span class="p">,</span> <span class="ss">:logistic</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">reg</span><span class="o">.</span><span class="n">predict</span> <span class="nb">test</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Daru::Vector(3)&gt;</span>
</span><span class='line'>      <span class="mi">0</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2999</span>
</span><span class='line'>      <span class="mi">1</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1523</span>
</span><span class='line'>      <span class="mi">2</span> <span class="mi">0</span><span class="o">.</span><span class="mi">8925</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code not only enables predictions with caetgory data but also reflects the powerful formula langauge.</p>

<p><a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Categorical%20Data/examples/%5BExample%5D%20Formula%20language%20in%20Statsample-GLM.ipynb">Here&rsquo;s</a> a notebook that describes the use of formula language in Statsample-GLM using real life data.</p>

<p>Lets have a look at Statsample now.</p>

<h2>Statsample</h2>

<p>With Statsample, its the same. Now one can perform multiple regression with formula language and category variables as predictors.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">reg</span> <span class="o">=</span> <span class="no">Statsample</span><span class="o">::</span><span class="no">FitModel</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;y~a+a:b+c+c:d&#39;</span><span class="p">,</span> <span class="n">train</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">mod</span> <span class="o">=</span> <span class="n">reg</span><span class="o">.</span><span class="n">model</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will give a multiple linear regression model.</p>

<h2>Conclusion</h2>

<p>The introduction of formula language and ability to handle category data has given a great boost to Data Analysis in Ruby and I really hope we keep improving it further and further.</p>

<p>In the coming weeks I will look forward to implement the following:</p>

<ul>
<li>Add more than 2-way interaction support</li>
<li>Support for shortcut symbols &lsquo;*&rsquo;, &lsquo;/&rsquo;, etc.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualization [Week 5-6]]]></title>
    <link href="http://lokeshh.github.io/blog/2016/07/02/visualization/"/>
    <updated>2016-07-02T15:48:03+00:00</updated>
    <id>http://lokeshh.github.io/blog/2016/07/02/visualization</id>
    <content type="html"><![CDATA[<p>During these two weeks I added visualization of categorical data in addition to support of a new plotting library <a href="https://github.com/topfunky/gruff">Gruff</a></p>

<p>Daru supports visualization via three libraries:</p>

<ul>
<li><a href="https://github.com/SciRuby/nyaplot">Nyaplot</a></li>
<li><a href="https://github.com/SciRuby/gnuplotrb/">GnuplotRB</a></li>
<li><a href="https://github.com/topfunky/gruff">Gruff</a> (new)</li>
</ul>


<p>Lets discuss them one by one</p>

<h2>Nyaplot</h2>

<p>Nyaplot is the default plotting library for Daru. Nyaplot allows creation of a variety of plots with Daru easily. Its biggest strength lies in its ablity to draw interactive plots.</p>

<p>Now Daru also supports categorical data visualization using Nyaplot. It mainly has two aspects:</p>

<ul>
<li>In case of a category vector it allows to view the frequencies of categories in a bar graph.</li>
<li>And in case of dataframe containing a category vector, it allows to have scatter and line plots categorized by a category vector visualized by different shape, size and color.</li>
</ul>


<p><a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Plotting/Visualization.ipynb">Here</a> are some examples of visualization of category data using Nyaplot in Daru.</p>

<h2>GnuplotRB</h2>

<p>GnuplotRB is another great library which has inbuilt support for Daru datastructres: <code>Daru::Vector</code> and <code>Daru::DataFrame</code>. Though it doesn&rsquo;t directly operate on vectors and dataframes but uses its own API, it provides out of box support to plot <code>Daru::Vector</code> and <code>Data::DataFrame</code>.</p>

<p>GnuplotRB strength lies in its offering of highly customized plots with yet a very simple to use API.</p>

<p>No work was done regarding supporting categorical data visualization in GnuplotRB because it supports it out of the box owing to its easy to use API that lets plot multiple plots with a variety of features.</p>

<p><a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Plotting/Gnuplotrb.ipynb">Here&rsquo;s</a> a notebook demonstrating examples in the way category data can be visualizaed using GnuplotRB.</p>

<h2>Gruff</h2>

<p>Gruff is a new plotting library that has just been added to Daru. <a href="https://github.com/topfunky/gruff">Gruff</a> offers remarkably beautiful plots with very less effort. It also offers pie and sidebar plots which currently the other two libraries don&rsquo;t offer.</p>

<p>These two notebooks show examples related to plotting of <code>Daru::Vector</code> and <code>Daru::DataFrame</code>:</p>

<ul>
<li><a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Plotting/Gruff%20Vector.ipynb">Plotting of Vector</a></li>
<li><a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Plotting/Gruff%20DataFrame.ipynb">Plotting of DataFrame</a></li>
</ul>


<h2>Choose from different libraries</h2>

<p>To easily move between these all these libraries, Daru has following functions:</p>

<ul>
<li><code>Daru.plotting_library</code></li>
<li><code>Daru::Vector#plotting_library</code></li>
<li><code>Daru::DataFrame#plotting_library</code></li>
</ul>


<p><code>Daru.plotting_library</code> can be used to set the current plotting library. For example, using <code>Daru.plotting_library = :gruff</code> one can switch the plotting library to Gruff. This means all the plots created here after will be using Gruff for plotting.</p>

<p>Inorder to change plotting library for only a specific vector, one can use <code>Daru::Vector#plotting_library</code>. For example, <code>dv.plotting_library = :gruff</code> will only change plotting library for vector <code>dv</code> and all other vectors created will created using library as set by <code>Daru.plotting_library</code>.</p>

<p>The same goes for dataframes, one can use <code>df.plotting_library = :gruff</code> to set plotting library for data frame <code>df</code> to Gruff.</p>

<h2>Summary</h2>

<p>Along with the support of categorical data, Daru now also owns the ability to visualize catgory data. I realized and addressed a few shortcoming of some of these libraries and we at SciRuby are motivated to overcome those shortcoming and make visualization in Daru more complete.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Categorical Data [Week 3-4]]]></title>
    <link href="http://lokeshh.github.io/blog/2016/06/21/categorical-data/"/>
    <updated>2016-06-21T20:19:08+00:00</updated>
    <id>http://lokeshh.github.io/blog/2016/06/21/categorical-data</id>
    <content type="html"><![CDATA[<p>Daru has now the capability to store and process categorical data.</p>

<p>Daru has now three types of vector</p>

<ul>
<li><code>:object</code></li>
<li><code>:numeric</code></li>
<li><code>:category (new)</code></li>
</ul>


<p>With introduction of categorical data, Daru has now two benefits-</p>

<ol>
<li>Storage of categorical data is very effective.</li>
<li>Tasks related to categorical data have become a lot easier</li>
</ol>


<p>The reason for <code>1</code> is that in ordinary vector the data is stored as an array, it doesn&rsquo;t consider the fact that most of the entries are same.</p>

<p>Lets discuss the various tasks which can now be done easily related to categorical vector.</p>

<p>(The purpose of this blog is to give an overview of what tasks can be accomplished with categorical data. To learn about what each method do and how to use it please look at <a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Categorical%20Data/Categorical%20Data.ipynb">this notebook</a>)</p>

<p>As soon as one declares a categorical variable, one can look at frequency count of each category to get judgement of the data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">rank</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="s1">&#39;III&#39;</span><span class="o">]*</span><span class="mi">10</span> <span class="o">+</span> <span class="o">[</span><span class="s1">&#39;II&#39;</span><span class="o">]*</span><span class="mi">5</span> <span class="o">+</span> <span class="o">[</span><span class="s1">&#39;I&#39;</span><span class="o">]*</span><span class="mi">5</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:category</span><span class="p">,</span> <span class="ss">categories</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;I&#39;</span><span class="p">,</span> <span class="s1">&#39;II&#39;</span><span class="p">,</span> <span class="s1">&#39;III&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">rank</span><span class="o">.</span><span class="n">frequencies</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Daru::Vector(3)&gt;</span>
</span><span class='line'>   <span class="n">I</span>   <span class="mi">5</span>
</span><span class='line'>  <span class="no">II</span>   <span class="mi">5</span>
</span><span class='line'> <span class="no">III</span>  <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>One can look over the summary of the data to get to know common numbers about categorical data like how many categories are present, which is the most frequenct category, etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">rank</span><span class="o">.</span><span class="n">summary</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Daru::Vector(6)&gt;</span>
</span><span class='line'>         <span class="n">size</span>           <span class="mi">20</span>
</span><span class='line'>   <span class="n">categories</span>            <span class="mi">3</span>
</span><span class='line'>     <span class="n">max_freq</span>           <span class="mi">10</span>
</span><span class='line'> <span class="n">max_category</span>          <span class="no">III</span>
</span><span class='line'>     <span class="n">min_freq</span>            <span class="mi">5</span>
</span><span class='line'> <span class="n">min_category</span>            <span class="n">I</span>
</span></code></pre></td></tr></table></div></figure>


<p>Its possible to convert a numerical variable into categorical variable. For example <code>heights</code> store measures of heights and we want to categorize them into categories <code>low</code>, <code>medium</code> and <code>high</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">heights</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="mi">30</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">51</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">heights_cat</span> <span class="o">=</span> <span class="n">heights</span><span class="o">.</span><span class="n">cut</span> <span class="o">[</span><span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">60</span><span class="o">]</span><span class="p">,</span> <span class="ss">labels</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;low&#39;</span><span class="p">,</span> <span class="s1">&#39;medium&#39;</span><span class="p">,</span> <span class="s1">&#39;high&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">height_cat</span><span class="o">.</span><span class="n">frequencies</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Daru::Vector(3)&gt;</span>
</span><span class='line'>    <span class="n">low</span>      <span class="mi">3</span>
</span><span class='line'> <span class="n">medium</span>      <span class="mi">1</span>
</span><span class='line'>   <span class="n">high</span>      <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given a dataframe its possible to extract rows based on the categories. It uses the same Area-like query syntax like an ordinary vector. For example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">grade</span><span class="p">:</span> <span class="sx">%w[A C B A C C B B]</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;f&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="o">]</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">df</span><span class="o">[</span><span class="ss">:grade</span><span class="o">]</span> <span class="o">=</span> <span class="n">df</span><span class="o">[</span><span class="ss">:grade</span><span class="o">].</span><span class="n">to_category</span> <span class="ss">ordered</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">categories</span><span class="p">:</span> <span class="sx">%w[A B C]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Lets list entries with grade less than &#39;C&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">where</span> <span class="n">df</span><span class="o">[</span><span class="ss">:grade</span><span class="o">].</span><span class="n">lt</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Daru::DataFrame(5x3)&gt;</span>
</span><span class='line'>       <span class="n">grade</span>    <span class="nb">id</span>  <span class="nb">name</span>
</span><span class='line'>     <span class="mi">0</span>     <span class="n">A</span>     <span class="mi">0</span>     <span class="n">a</span>
</span><span class='line'>     <span class="mi">2</span>     <span class="n">B</span>     <span class="mi">2</span>     <span class="n">c</span>
</span><span class='line'>     <span class="mi">3</span>     <span class="n">A</span>     <span class="mi">3</span>     <span class="n">d</span>
</span><span class='line'>     <span class="mi">6</span>     <span class="n">B</span>     <span class="mi">6</span>     <span class="n">g</span>
</span><span class='line'>     <span class="mi">7</span>     <span class="n">B</span>     <span class="mi">7</span>     <span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>


<p>The benefit is that we used <code>lt</code> based on the order we set.</p>

<p>By defining the custom order of categories and setting <code>ordered</code> to <code>true</code>, one can sort the categories, find the min, max, etc. For example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Assuming df defined as above</span>
</span><span class='line'><span class="c1"># Lets rename the categories to show that lexical order is not followed</span>
</span><span class='line'><span class="c1"># while sorting with categorical data</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">df</span><span class="o">[</span><span class="ss">:grade</span><span class="o">].</span><span class="n">rename_categories</span> <span class="s1">&#39;A&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Good&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Average&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Bad&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">df</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Daru::DataFrame(8x3)&gt;</span>
</span><span class='line'>           <span class="n">grade</span>      <span class="nb">id</span>    <span class="nb">name</span>
</span><span class='line'>       <span class="mi">0</span>    <span class="no">Good</span>       <span class="mi">0</span>       <span class="n">a</span>
</span><span class='line'>       <span class="mi">1</span>     <span class="no">Bad</span>       <span class="mi">1</span>       <span class="n">b</span>
</span><span class='line'>       <span class="mi">2</span> <span class="no">Average</span>       <span class="mi">2</span>       <span class="n">c</span>
</span><span class='line'>       <span class="mi">3</span>    <span class="no">Good</span>       <span class="mi">3</span>       <span class="n">d</span>
</span><span class='line'>       <span class="mi">4</span>     <span class="no">Bad</span>       <span class="mi">4</span>       <span class="n">e</span>
</span><span class='line'>       <span class="mi">5</span>     <span class="no">Bad</span>       <span class="mi">5</span>       <span class="n">f</span>
</span><span class='line'>       <span class="mi">6</span> <span class="no">Average</span>       <span class="mi">6</span>       <span class="n">g</span>
</span><span class='line'>       <span class="mi">7</span> <span class="no">Average</span>       <span class="mi">7</span>       <span class="n">h</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">sort!</span> <span class="o">[</span><span class="ss">:grade</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Daru::DataFrame(8x3)&gt;</span>
</span><span class='line'>           <span class="n">grade</span>      <span class="nb">id</span>    <span class="nb">name</span>
</span><span class='line'>       <span class="mi">0</span>    <span class="no">Good</span>       <span class="mi">0</span>       <span class="n">a</span>
</span><span class='line'>       <span class="mi">3</span>    <span class="no">Good</span>       <span class="mi">3</span>       <span class="n">d</span>
</span><span class='line'>       <span class="mi">2</span> <span class="no">Average</span>       <span class="mi">2</span>       <span class="n">c</span>
</span><span class='line'>       <span class="mi">6</span> <span class="no">Average</span>       <span class="mi">6</span>       <span class="n">g</span>
</span><span class='line'>       <span class="mi">7</span> <span class="no">Average</span>       <span class="mi">7</span>       <span class="n">h</span>
</span><span class='line'>       <span class="mi">1</span>     <span class="no">Bad</span>       <span class="mi">1</span>       <span class="n">b</span>
</span><span class='line'>       <span class="mi">4</span>     <span class="no">Bad</span>       <span class="mi">4</span>       <span class="n">e</span>
</span><span class='line'>       <span class="mi">5</span>     <span class="no">Bad</span>       <span class="mi">5</span>       <span class="n">f</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Example</h2>

<p>Please have a look at <a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Categorical%20Data/examples/%5BExample%5D%20Categorical%20Data.ipynb">this notebook</a> which describes use of categorical data though an example.</p>

<h2>Internal Structure</h2>

<p>Its similar to the internal structure of categorical index.</p>

<p>To efficiently store the duplicates of catgories and make retrieval possible in constant time, categorical data in Daru uses two data structres-</p>

<ul>
<li>Hash-table: To map each category to positional values. It is represented as <code>@cat_hash</code>.</li>
<li>Array: To map each position to a integer which represent a category.</li>
</ul>


<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dv</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">Vector</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="ss">:a</span><span class="p">,</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:C</span><span class="o">]</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:category</span>
</span></code></pre></td></tr></table></div></figure>


<p>For <code>dv</code>, the hash table and array would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@cat_hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="o">[</span><span class="mi">4</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The hash table helps us in retriving all instances which belong to that category in real time.</p>

<p>Similary, the array helps us in retriving category of an instance in constant time.</p>

<p>And the reason to store integers in the array instead of name of categories itself is to avoid unnecessary usage of space.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Categorical Index [Week 1-2]]]></title>
    <link href="http://lokeshh.github.io/blog/2016/06/14/categorical-index/"/>
    <updated>2016-06-14T07:54:47+00:00</updated>
    <id>http://lokeshh.github.io/blog/2016/06/14/categorical-index</id>
    <content type="html"><![CDATA[<p>Daru just got a new capability => Categorical Index.</p>

<p>Now one can organize vector and dataframe using index that is categorical.</p>

<p>Daru has got now 4 types of indexes to index data:</p>

<ul>
<li>Daru::Index</li>
<li>Daru::MultiIndex</li>
<li>Daru::DateTimeIndex</li>
<li>Daru::CategoricalIndex (new)</li>
</ul>


<p><code>Daru::Index</code> is for usual index where every value is unique.</p>

<p><code>Daru::MultiIndex</code> is for indexing with more than one level.</p>

<p><code>Daru::DateTimeIndex</code> is to have indexing with dates. Its powerful means to analyze time series data.</p>

<p>The new <code>Daru::CategoricalIndex</code> is helpful with data indexed with sparsely populated index with each unique index value as category.</p>

<p>Please visit <a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Categorical%20Data/Indexing%20in%20Vector.ipynb">this link</a> before to get a basic understanding of how indexing works in <code>Daru::Vector</code> and <a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Categorical%20Data/Indexing%20in%20DataFrame.ipynb">this link</a> for <code>Daru::DataFrame</code>.</p>

<h2>Example</h2>

<p>Let&rsquo;s see an example.</p>

<p>(Alternatively you can also see this example in iRuby notebook <a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Categorical%20Data/examples/%5BExample%5D%20Categorical%20Index.ipynb">here</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;daru&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/WHO.csv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">df</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">DataFrame</span><span class="o">.</span><span class="n">from_csv</span> <span class="n">content</span>
</span><span class='line'>
</span><span class='line'><span class="n">df</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="c1">#&lt;Daru::DataFrame(194x6)&gt;</span>
</span><span class='line'>                 <span class="no">Country</span>     <span class="no">Region</span> <span class="no">Population</span>    <span class="no">Under15</span>     <span class="no">Over60</span> <span class="no">FertilityR</span>
</span><span class='line'>            <span class="mi">0</span> <span class="no">Afghanista</span> <span class="no">Eastern</span> <span class="no">Me</span>      <span class="mi">29825</span>      <span class="mi">47</span><span class="o">.</span><span class="mi">42</span>       <span class="mi">3</span><span class="o">.</span><span class="mi">82</span>        <span class="mi">5</span><span class="o">.</span><span class="mi">4</span>
</span><span class='line'>            <span class="mi">1</span>    <span class="no">Albania</span>     <span class="no">Europe</span>       <span class="mi">3162</span>      <span class="mi">21</span><span class="o">.</span><span class="mi">33</span>      <span class="mi">14</span><span class="o">.</span><span class="mi">93</span>       <span class="mi">1</span><span class="o">.</span><span class="mi">75</span>
</span><span class='line'>            <span class="mi">2</span>    <span class="no">Algeria</span>     <span class="no">Africa</span>      <span class="mi">38482</span>      <span class="mi">27</span><span class="o">.</span><span class="mi">42</span>       <span class="mi">7</span><span class="o">.</span><span class="mi">17</span>       <span class="mi">2</span><span class="o">.</span><span class="mi">83</span>
</span><span class='line'>            <span class="mi">3</span>    <span class="no">Andorra</span>     <span class="no">Europe</span>         <span class="mi">78</span>       <span class="mi">15</span><span class="o">.</span><span class="mi">2</span>      <span class="mi">22</span><span class="o">.</span><span class="mi">86</span>        <span class="kp">nil</span>
</span><span class='line'>            <span class="mi">4</span>     <span class="no">Angola</span>     <span class="no">Africa</span>      <span class="mi">20821</span>      <span class="mi">47</span><span class="o">.</span><span class="mi">58</span>       <span class="mi">3</span><span class="o">.</span><span class="mi">84</span>        <span class="mi">6</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'>            <span class="mi">5</span> <span class="no">Antigua</span> <span class="n">an</span>   <span class="no">Americas</span>         <span class="mi">89</span>      <span class="mi">25</span><span class="o">.</span><span class="mi">96</span>      <span class="mi">12</span><span class="o">.</span><span class="mi">35</span>       <span class="mi">2</span><span class="o">.</span><span class="mi">12</span>
</span><span class='line'>            <span class="mi">6</span>  <span class="no">Argentina</span>   <span class="no">Americas</span>      <span class="mi">41087</span>      <span class="mi">24</span><span class="o">.</span><span class="mi">42</span>      <span class="mi">14</span><span class="o">.</span><span class="mi">97</span>        <span class="mi">2</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>            <span class="mi">7</span>    <span class="no">Armenia</span>     <span class="no">Europe</span>       <span class="mi">2969</span>      <span class="mi">20</span><span class="o">.</span><span class="mi">34</span>      <span class="mi">14</span><span class="o">.</span><span class="mo">06</span>       <span class="mi">1</span><span class="o">.</span><span class="mi">74</span>
</span><span class='line'>            <span class="mi">8</span>  <span class="no">Australia</span> <span class="no">Western</span> <span class="no">Pa</span>      <span class="mi">23050</span>      <span class="mi">18</span><span class="o">.</span><span class="mi">95</span>      <span class="mi">19</span><span class="o">.</span><span class="mi">46</span>       <span class="mi">1</span><span class="o">.</span><span class="mi">89</span>
</span><span class='line'>            <span class="mi">9</span>    <span class="no">Austria</span>     <span class="no">Europe</span>       <span class="mi">8464</span>      <span class="mi">14</span><span class="o">.</span><span class="mi">51</span>      <span class="mi">23</span><span class="o">.</span><span class="mi">52</span>       <span class="mi">1</span><span class="o">.</span><span class="mi">44</span>
</span><span class='line'>           <span class="mi">10</span> <span class="no">Azerbaijan</span>     <span class="no">Europe</span>       <span class="mi">9309</span>      <span class="mi">22</span><span class="o">.</span><span class="mi">25</span>       <span class="mi">8</span><span class="o">.</span><span class="mi">24</span>       <span class="mi">1</span><span class="o">.</span><span class="mi">96</span>
</span><span class='line'>           <span class="mi">11</span>    <span class="no">Bahamas</span>   <span class="no">Americas</span>        <span class="mi">372</span>      <span class="mi">21</span><span class="o">.</span><span class="mi">62</span>      <span class="mi">11</span><span class="o">.</span><span class="mi">24</span>        <span class="mi">1</span><span class="o">.</span><span class="mi">9</span>
</span><span class='line'>           <span class="mi">12</span>    <span class="no">Bahrain</span> <span class="no">Eastern</span> <span class="no">Me</span>       <span class="mi">1318</span>      <span class="mi">20</span><span class="o">.</span><span class="mi">16</span>       <span class="mi">3</span><span class="o">.</span><span class="mi">38</span>       <span class="mi">2</span><span class="o">.</span><span class="mi">12</span>
</span><span class='line'>           <span class="mi">13</span> <span class="no">Bangladesh</span> <span class="no">South</span><span class="o">-</span><span class="no">East</span>     <span class="mi">155000</span>      <span class="mi">30</span><span class="o">.</span><span class="mi">57</span>       <span class="mi">6</span><span class="o">.</span><span class="mi">89</span>       <span class="mi">2</span><span class="o">.</span><span class="mi">24</span>
</span><span class='line'>           <span class="mi">14</span>   <span class="no">Barbados</span>   <span class="no">Americas</span>        <span class="mi">283</span>      <span class="mi">18</span><span class="o">.</span><span class="mi">99</span>      <span class="mi">15</span><span class="o">.</span><span class="mi">78</span>       <span class="mi">1</span><span class="o">.</span><span class="mi">84</span>
</span><span class='line'>          <span class="o">.</span><span class="n">.</span><span class="o">.</span>        <span class="o">.</span><span class="n">.</span><span class="o">.</span>        <span class="o">.</span><span class="n">.</span><span class="o">.</span>        <span class="o">.</span><span class="n">.</span><span class="o">.</span>        <span class="o">.</span><span class="n">.</span><span class="o">.</span>        <span class="o">.</span><span class="n">.</span><span class="o">.</span>        <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The data is about countries. The <code>region</code> column describes the region that country belongs to. A region can have more than one country.</p>

<p>This a ideal place where we can use Categorical Index if we want to study about different regions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">CategoricalIndex</span><span class="o">.</span><span class="n">new</span> <span class="p">(</span><span class="n">df</span><span class="o">[</span><span class="s1">&#39;Region&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#&lt;Daru::CategoricalIndex(194): {Eastern Mediterranean, Europe, Africa, Europe, Africa, Americas, Americas, Europe, Western Pacific, Europe, Europe, Americas, Eastern Mediterranean, South-East Asia, Americas, Europe, Europe, Americas, Africa, South-East Asia ... Africa}&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see all regions there are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">index</span><span class="o">.</span><span class="n">categories</span>
</span><span class='line'>  <span class="o">[</span><span class="s2">&quot;Eastern Mediterranean&quot;</span><span class="p">,</span> <span class="s2">&quot;Europe&quot;</span><span class="p">,</span> <span class="s2">&quot;Africa&quot;</span><span class="p">,</span> <span class="s2">&quot;Americas&quot;</span><span class="p">,</span> <span class="s2">&quot;Western Pacific&quot;</span><span class="p">,</span> <span class="s2">&quot;South-East Asia&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s find out how many countries lie in Africa region.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">row</span><span class="o">[</span><span class="s1">&#39;Africa&#39;</span><span class="o">].</span><span class="n">size</span>
</span><span class='line'>  <span class="mi">46</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finding out the mean life expectancy of europe is as easy as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">row</span><span class="o">[</span><span class="s1">&#39;Europe&#39;</span><span class="o">][</span><span class="s1">&#39;LifeExpectancy&#39;</span><span class="o">].</span><span class="n">mean</span>
</span><span class='line'>  <span class="mi">76</span><span class="o">.</span><span class="mi">73584905660377</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see the maximum life expectancy  of South-East Asia</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">row</span><span class="o">[</span><span class="s1">&#39;South-East Asia&#39;</span><span class="o">][</span><span class="s1">&#39;LifeExpectancy&#39;</span><span class="o">].</span><span class="n">min</span>
</span><span class='line'>  <span class="mi">63</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Internal architecture</h2>

<p>To efficiently store the index and make retrieval possible in constant time, <code>Daru::CategoricalIndex</code> uses two data structres-</p>

<ul>
<li>Hash-table: To map each category to positional values. It is represented as <code>@cat_hash</code>.</li>
<li>Array: To map each position to a integer which represent a category.</li>
</ul>


<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">idx</span> <span class="o">=</span> <span class="no">Daru</span><span class="o">::</span><span class="no">CategoricalIndex</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="ss">:a</span><span class="p">,</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:c</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>For <code>idx</code>, the hash table and array woul be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@cat_hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="o">[</span><span class="mi">4</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The hash table helps us in retriving all instances which belong to that category in real time.</p>

<p>Similary, the array helps us in retriving category of an instance in constant time.</p>

<p>And the reason to store integers in the array instead of name of categories itself is to avoid unnecessary usage of space.</p>

<h2>When and why to use Categorical Index</h2>

<p>If you have a categorical variable or data where there are more than one instance of same object and you want to index the dataframe by that column.</p>

<p>It will save you a lot of space and make access to the same category fast.</p>

<p>Also if you want your dataframe to be indexed by a column in which not every entry is unique categorical index will come to the rescue.</p>
]]></content>
  </entry>
  
</feed>
